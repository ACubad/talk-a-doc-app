import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google"; // Corrected font import name if needed
import "./globals.css";
import { ThemeProvider } from "next-themes"; // Import ThemeProvider
// Remove direct imports of SidebarBody, SidebarLink, etc. as they are handled internally now
// import {
//   Sidebar,
//   SidebarBody,
//   SidebarLink,
// } from "../components/sidebar";
import {
  Settings, // Keep icons if needed elsewhere, or remove if only used in sidebar
  FilePenLine, // Keep icons if needed elsewhere
  Search, // Keep icons if needed elsewhere
  FolderKanban, // Keep icons if needed elsewhere
} from "lucide-react"; // Removed duplicates
// import LogoutButton from "../components/LogoutButton"; // LogoutButton is now internal to sidebar
import { createServerComponentClient } from '@/lib/supabaseClient';
import AppLayout from "@/components/AppLayout"; // Import the new AppLayout component

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

// Removed OpenOnly helper component

export default async function RootLayout({ // Make async
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  // Fetch user session on the server
  const supabase = await createServerComponentClient();
  const { data: { user } } = await supabase.auth.getUser(); // Revert getUser call

  return (
    // Add suppressHydrationWarning to html tag for next-themes
    <html lang="en" suppressHydrationWarning>
      <body className={`${geistSans.variable} ${geistMono.variable} antialiased`}>
        {/* Wrap AppLayout with ThemeProvider */}
        <ThemeProvider
          attribute="class"
          defaultTheme="system"
          enableSystem
          disableTransitionOnChange
        >
          {/* Use AppLayout to wrap the content */}
          {/* Pass user object and children */}
          <AppLayout user={user}>
            {children}
          </AppLayout>
        </ThemeProvider>
      </body>
    </html>
  );
}
